
工程结构概览 -- 定义应用分层及依赖关系
	分层

		领域模型层(Domain)
			定义不同的聚合(Aggregate),以及领域模型
			定义领域事件

		基础设施层
			仓储层、EF的Domain的Context、以及其他共享代码的具体实现
			领域模型与数据库之间的映射关系(EntityConfigurations目录下)
			全局事务管理(DomainContextTransactionBehavior)

		应用层
			API层，承载Web Api或Web应用
				Infrastructure:基础设施目录，存放身份认证、缓存之类的与基础设施交互的代码
				Extensions:扩展层，服务注册(ServiceCollection)、中间件配置(ApplicationBuilder)的扩展
				Controller:控制器层，主要定义Web API 前后端交互的接口
				Application:应用层，使用了CQRS的设计模式，命令、查询、领域事件处理、集成事件处理
			BackgroundTasks，后台任务job宿主程序，通常为控制台应用或WindowsService

		共享层(Shared)
			建议通过私有NuGet的仓库来存储，其他工程直接使用NuGet包来直接引用即可
			Core:基础类型，比如异常、帮助类
			Domain.Abstractions:领域抽象层，领域模型基类/接口、领域事件接口、领域事件处理接口、Entity接口/基类
			Infrastructure.Core:基础设施核心层，对仓储、EFContext定义一些共享代码

	依赖关系
		共享层:该层内的工程独立不依赖项目中其他任何工程
			  Core项目独立，Infrastructure.Core项目仅依赖 Domain.Abstractions
		基础设施层:依赖共享层中的基础设施工程
		应用层:依赖基础设施层

	总结
		1. 领域模型专注业务的设计，不依赖仓储等基础设施层
		2. 基础设施的仓储层仅负责领域模型的取出和存储，不承载任何业务逻辑代码
		3. 使用 CQRS 模式设计应用层
		4. Web API 是面向前端的交互接口，避免依赖领域模型
		5. 将共享代码设计为共享包，使用私有NuGet仓库分发管理



    

MediatR -- 中介者工具，轻松实现命令查询职责分离模式（CQRS）

	IPipelineBehavior
		GeekTime.Infrastructure.Core/Behaviors
		类似中间件执行方式，在命令或者领域事件处理的之前或之后插入逻辑
		Handle函数的参数 RequestHandlerDelegate，是指CommandHandler或者EventHandler的具体逻辑，在此之前可以加入其它处理逻辑

	核心对象
		IMediator		
		IRequest、IRequest<T>
		IRequestHandler<int TRequest,TResponse>

	处理领域事件
		IMediator
		INotification
		INotivicationHandler<in TNotification>


		

