APIController -- 定义API的最佳实践

在传统三层架构中，Controller 承担了入参的类型转换、服务调用逻辑，随着业务的逐步复杂，Controller就会越来越膨胀，而服务中的处理逻辑实际上就是领域模型所操作的部分。
在DDD领域驱动设计的理念下，我们更倾向于把应用程序的每一层明确区分，然后层与层之间的界限应该是明确的，在实现上也是隔离的
Controller层，负责与前端用户的交互，主要的责任就是定义用户输入和响应输出，实现我们的路由规则、身份认证、授权类似功能，而不应该去负责处理领域模型、仓储等

在我们的示例中，使用了一个中间者模式的 MediatR 组件，MediatR 通过把命令发送出去，交给定义在 Commands 目录下指定的命令处理程序处理，这样就可以将业务逻辑部分和 Controller 进行隔离。

其他建议
	Controller中依赖的服务对象，多处Action依赖使用的服务尽量通过Controller的构造函数注入，非服务建议使用[FromService]注入，避免多出实例化对象造成代码混乱失控
	不建议使用属性注入方式
	Action应尽量定义为异步，使用async/await组合

总结
	负责用户的输入输出定义
	负责身份认证与授权
	与领域服务职责区分隔离，不承载业务逻辑，应该把这些职责交给命令处理程序或者领域服务来处理